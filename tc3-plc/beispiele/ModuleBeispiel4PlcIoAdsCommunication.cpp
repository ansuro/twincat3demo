///////////////////////////////////////////////////////////////////////////////
// ModuleBeispiel4PlcIoAdsCommunication.cpp
#include "TcPch.h"
#pragma hdrstop

#include "ModuleBeispiel4PlcIoAdsCommunication.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CModuleBeispiel4PlcIoAdsCommunication
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CModuleBeispiel4PlcIoAdsCommunication
BEGIN_INTERFACE_MAP(CModuleBeispiel4PlcIoAdsCommunication)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()


IMPLEMENT_ITCOMOBJECT(CModuleBeispiel4PlcIoAdsCommunication)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CModuleBeispiel4PlcIoAdsCommunication)
IMPLEMENT_ITCADI(CModuleBeispiel4PlcIoAdsCommunication)
IMPLEMENT_ITCWATCHSOURCE(CModuleBeispiel4PlcIoAdsCommunication)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CModuleBeispiel4PlcIoAdsCommunication 
BEGIN_SETOBJPARA_MAP(CModuleBeispiel4PlcIoAdsCommunication)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CModuleBeispiel4PlcIoAdsCommunication 
BEGIN_GETOBJPARA_MAP(CModuleBeispiel4PlcIoAdsCommunication)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CModuleBeispiel4PlcIoAdsCommunication
BEGIN_OBJPARAWATCH_MAP(CModuleBeispiel4PlcIoAdsCommunication)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CModuleBeispiel4PlcIoAdsCommunication
BEGIN_OBJDATAAREA_MAP(CModuleBeispiel4PlcIoAdsCommunication)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_ModuleBeispiel4PlcIoAdsCommunicationInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_ModuleBeispiel4PlcIoAdsCommunicationAdsData, m_AdsData)
	OBJDATAAREA_VALUE(ADI_ModuleBeispiel4PlcIoAdsCommunicationOutputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CModuleBeispiel4PlcIoAdsCommunication::CModuleBeispiel4PlcIoAdsCommunication()
	: m_Trace(m_TraceLevelMax, m_spSrv)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_AdsData, 0, sizeof(m_AdsData));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CModuleBeispiel4PlcIoAdsCommunication::~CModuleBeispiel4PlcIoAdsCommunication() 
{
}


///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CModuleBeispiel4PlcIoAdsCommunication)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CModuleBeispiel4PlcIoAdsCommunication::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	// TODO port als parameter..
	hr = SUCCEEDED(hr) ? InitAmsPort(m_spSrv, 6666) : hr;
	//prepare address - here: take local one
	m_Addr.netId = AmsGetNetId();
	// and the default PLC port: 
	m_Addr.port = 851;
	// cleanup on failure
	if (FAILED(hr))
	{
		ShutdownAmsPort();
	}
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CModuleBeispiel4PlcIoAdsCommunication::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before this method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CModuleBeispiel4PlcIoAdsCommunication::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;


	long nErr = AdsDelDeviceNotificationReq(m_Addr, INVOKEID_DEL_NOTIHANDLE, m_AdsData.hVariableNotification);
	nErr = AdsWriteReq(m_Addr, INVOKEID_DEL_VARHANDLE, ADSIGRP_SYM_RELEASEHND, 0, sizeof(m_AdsData.hVariableHandle), &m_AdsData.hVariableHandle);
	// ...and wait for confirmations
	CTimeout timeoutHelper(1000);
	while (m_AdsData.hVariableNotification != 0 || m_AdsData.hVariableHandle != 0) // wait for all handles to be 0, which is done while receiving confirmations
	{
		m_spRTime->Delay(1);
		if (timeoutHelper.IsElapsed())
		{
			m_Trace.Log(tlAlways, FNAMEA "Error during shutdown: Havent received confirmations during 1000ms", hr);
			break;
		}
	}
	m_Trace.Log(tlAlways, FNAMEA "Shutdown ended", hr);

	RemoveModuleFromCaller(); 

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CModuleBeispiel4PlcIoAdsCommunication::SetObjStateSP()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	ShutdownAmsPort();

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CModuleBeispiel4PlcIoAdsCommunication::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	int nErr = 0;

	// TODO make it const member..
	char m_szVarname[] = { "MAIN.x" };


	//m_Trace.Log(tlVerbose, FLEAVEA "PLCX = ", m_Inputs.PLCX);
	switch (m_AdsData.Status)
	{
	case ADS_STATUS_INIT:
		// symbolisches Variablen-Handle holen
		// über IndexGroup ADSIGRP_SYM_HNDBYNAME 
		nErr = AdsReadWriteReq(m_Addr, INVOKEID_VARIABLEHANDLE, ADSIGRP_SYM_HNDBYNAME, 0x0, sizeof(m_AdsData.hVariableHandle), sizeof(m_szVarname), m_szVarname);
		if (nErr != S_OK)
		{
			// read write request failed. communication error
			m_AdsData.Status = ADS_STATUS_ERRORADSCOM;
			m_Trace.Log(tlAlways, FNAMEA "ADS_STATUS_INIT error");
		}
		else
		{
			// do nothing in cycleupdate. just wait for response in AdsReadWriteCon(...)
			m_AdsData.Status = ADS_STATUS_WAIT;
			m_Trace.Log(tlAlways, FNAMEA "ADS_STATUS_INIT waiting for AdsReadWriteCon");
		}
		break;

	case ADS_STATUS_ADD_NOTIFICATION:
		AdsNotificationAttrib  adsNotificationAttrib;
		adsNotificationAttrib.cbLength = 4;
		adsNotificationAttrib.nTransMode = ADSTRANS_SERVERONCHA;
		adsNotificationAttrib.nMaxDelay = 0;
		adsNotificationAttrib.nCycleTime = 10000000; // 1sec 
		// über Variablenhandle den Wert über IndexGroup ADSIGRP_SYM_VALBYHND holen
		nErr = AdsAddDeviceNotificationReq(m_Addr, INVOKEID_NOTIFICATIONHANDLE, ADSIGRP_SYM_VALBYHND, m_AdsData.hVariableHandle, adsNotificationAttrib);
		if (nErr != S_OK)
		{
			m_AdsData.Status = ADS_STATUS_ERRORADSCOM;
			m_Trace.Log(tlAlways, FNAMEA "ADS_STATUS_ADD_NOTIFICATION error");
		}
		else
		{
			// wait for AdsAddDeviceNotificationCon
			m_AdsData.Status = ADS_STATUS_WAIT;
			m_Trace.Log(tlAlways, FNAMEA "waiting for AdsAddDeviceNotificationCon");
		}
		break;

	default:
		break;
	}

	CheckOrders();

	return hr;
}
///</AutoGeneratedContent>

// ADS specific methods
void CModuleBeispiel4PlcIoAdsCommunication::AdsReadWriteCon(AmsAddr & rAddr, ULONG invokeId, ULONG nResult, ULONG cbLength, PVOID pData)
{
	// Variablenhandle gefunden
	if (nResult == S_OK && invokeId == INVOKEID_VARIABLEHANDLE)
	{
		// variable handle received
		m_Trace.Log(tlAlways, FNAMEA "AdsReadWrite for ads-variable getHdl got invokeid=0x%08x and nresult=0x%08x", invokeId, nResult);
		memcpy(&m_AdsData.hVariableHandle, pData, sizeof(m_AdsData.hVariableHandle));
		m_AdsData.Status = ADS_STATUS_ADD_NOTIFICATION;
	}
	else
	{
		// not ok or different invokeId
		m_Trace.Log(tlAlways, FLEAVEA "No variable handle.. retrying");
		m_AdsData.Status = ADS_STATUS_INIT;
	}
}


void CModuleBeispiel4PlcIoAdsCommunication::AdsAddDeviceNotificationCon(AmsAddr & rAddr, ULONG invokeId, ULONG nResult, ULONG handle)
{
	if (nResult == S_OK && INVOKEID_NOTIFICATIONHANDLE)
	{
		// notification handle received
		memcpy(&m_AdsData.hVariableNotification, &handle, sizeof(m_AdsData.hVariableNotification));
		m_Trace.Log(tlAlways, FNAMEA "AdsAddDeviceNotificationCon got invokeid=0x%08x and nresult=0x%08x", invokeId, nResult);
	}
	else
	{
		m_Trace.Log(tlAlways, FNAMEA "AdsAddDeviceNotificationCon Error");
		m_AdsData.Status = ADS_STATUS_ERRORADSCOM;
	}
}

// Change value listener
void CModuleBeispiel4PlcIoAdsCommunication::AdsDeviceNotificationInd(AmsAddr & rAddr, ULONG invokeId, ULONG cbLength, AdsNotificationStream * pNotifications)
{
	if (pNotifications->nStamps >= 1 && pNotifications->tStamp[0].tSample->cbSampleSize == 4 && pNotifications->tStamp[0].tSample->hNotification == m_AdsData.hVariableNotification)
	{
		m_Trace.Log(tlAlways, FNAMEA "AdsDeviceNotificationInd received for notification hdl 0x%08x with new value 0x%08x", m_AdsData.hVariableNotification, pNotifications->tStamp[0].tSample->data[0]);
		m_Outputs.AdsX = pNotifications->tStamp[0].tSample->data[0];
	}
	else
	{
		m_Trace.Log(tlAlways, FNAMEA "AdsDeviceNotificationInd received with unknown information!");
	}
}

// delete notification 
void CModuleBeispiel4PlcIoAdsCommunication::AdsDelDeviceNotificationCon(AmsAddr & rAddr, ULONG invokeId, ULONG nResult)
{
	if (invokeId == INVOKEID_DEL_NOTIHANDLE)
	{
		m_Trace.Log(tlAlways, FNAMEA "AdsDelDeviceNotificationCon received ");
		m_AdsData.hVariableNotification = 0;
	}
	else
	{
		m_Trace.Log(tlAlways, FNAMEA "AdsDelDeviceNotificationCon received with unknown invokeid 0x%08x!", invokeId);
	}
}

// delete variable handle
void CModuleBeispiel4PlcIoAdsCommunication::AdsWriteCon(AmsAddr & rAddr, ULONG invokeId, ULONG nResult)
{
	if (invokeId == INVOKEID_DEL_VARHANDLE)
	{
		m_Trace.Log(tlAlways, FNAMEA "AdsWriteCon received for deleting ads handle");
		m_AdsData.hVariableHandle = 0;
	}
	else
	{
		m_Trace.Log(tlAlways, FNAMEA "AdsWriteCon received with unknown invokeid 0x%08x!", invokeId);
	}
}



///////////////////////////////////////////////////////////////////////////////
HRESULT CModuleBeispiel4PlcIoAdsCommunication::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CModuleBeispiel4PlcIoAdsCommunication::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);
	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;
	m_Trace.Log(tlVerbose, FLEAVEA);
}

